<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e" kind="page">
    <compoundname>md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e</compoundname>
    <title>MPS-Port</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e_1autotoc_md0"/>I created this project so that I could use Metal Performance Shaders with metal-cpp. Currently, it supports all &quot;MPSMatrix&quot; operations like decomposition, find top k elements, matrix multiplication, random matrix generation, softmax, matrix solve.</para>
<para>The extension was written in the same style as metal-cpp. Just read the docs below to understand how to perform these operations because the syntax can be a little weird at times.</para>
<para>All functions and class definitions are under the <computeroutput>MPS</computeroutput> namespace. So, if an objC call were <computeroutput>MPSMatrixMultiplication</computeroutput>, it would be written in C++ as <computeroutput><ref refid="class_m_p_s_1_1_matrix_multiplication" kindref="compound">MPS::MatrixMultiplication</ref></computeroutput>.</para>
<sect1 id="md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e_1autotoc_md1">
<title>Headers</title>
<para>Just include the <computeroutput>MPSMatrix.hpp</computeroutput> file in <computeroutput>metal-cpp/MetalPerformanceShaders/MPSMatrix</computeroutput> folder. As an example, here&apos;s how the headers look like for me:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;Accelerate/Accelerate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CA_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MTL_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPS_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Foundation/Foundation.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Metal/Metal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;QuartzCore/QuartzCore.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MetalPerformanceShaders/MPSCore/MPSCoreTypes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MetalPerformanceShaders/MPSMatrix/MPSMatrix.hpp&quot;</highlight></codeline>
</programlisting> The command I use to compile is: <programlisting filename=".zsh"><codeline><highlight class="normal">clang++<sp/>-std=c++17<sp/>-stdlib=libc++<sp/>-O2<sp/>-I../metal-cpp<sp/>-I<sp/>/opt<sp/>-fno-objc-arc<sp/>-framework<sp/>Metal<sp/>-framework<sp/>Foundation<sp/>-framework<sp/>MetalKit<sp/>-framework<sp/>Accelerate<sp/>-framework<sp/>MetalPerformanceShaders<sp/>-g<sp/>{put<sp/>your<sp/>file<sp/>name<sp/>here}<sp/><sp/>-o<sp/>test.x</highlight></codeline>
</programlisting></para>
<para>Make sure you update the <computeroutput>-I</computeroutput> argument to where your metal-cpp folder is located.</para>
<para>Here&apos;s the documentation. It&apos;s just enough to get you started. I&apos;ll add more to the documentation including what works and what doesn&apos;t but until then:</para>
</sect1>
<sect1 id="md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e_1autotoc_md2">
<title>Creating Matrices</title>
<para>To create a matrix, you need <computeroutput><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref></computeroutput> objects. You must create a descriptor for a matrix, which is later used to actually create the matrix. For e.g.To create a descriptor for a 5x4 matrix with with float32 datatype:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref>*<sp/>mps_matdes<sp/>=<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(5,<sp/>4,<sp/>4*4,<sp/>MPS::MPSDataTypeFloat32);</highlight></codeline>
</programlisting> The first argument is the number of rows, followed by the number of columns, followed by the number of bytes in a row i.e. <computeroutput>numCols*dataTypeSize</computeroutput>, followed by the actual data type.</para>
<para>The actual matrix creation then works as follows (the <computeroutput>alloc</computeroutput> syntax does look like an eyesore. This is why the final goal is to create a wrapper around these operations): <programlisting filename=".cpp"><codeline><highlight class="normal">MTL::Device*<sp/>device<sp/>=<sp/>MTL::CreateSystemDefaultDevice();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref>*<sp/>mps_matdes<sp/>=<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(5,<sp/>4,<sp/>4*4,<sp/>MPS::MPSDataTypeFloat32);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_m_p_s_1_1_matrix" kindref="compound">MPS::Matrix</ref>*<sp/>matrix<sp/>=<sp/>MPS::Matrix::alloc();<sp/>matrix-&gt;initWithDevice(device,<sp/>mps_matdes);</highlight></codeline>
</programlisting></para>
<para>To actually put the data inside the matrix, one method would be to use <computeroutput>matrix-&gt;data()</computeroutput> which just returns a pointer to the <computeroutput>MTL::Buffer</computeroutput> containing the data (row major order). Then, just loop through it and add your data.</para>
<para>We can also initialize the matrix with an array. To initialize it with an array that contains your data, you need to initialize a buffer with that array and then initialize the matrix with that buffer (easy, huh? array-&gt;buffer-&gt;matrix) . Still, the cleanest way to write this would be:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{yourdatahere};</highlight></codeline>
<codeline><highlight class="normal">MTL::Buffer*<sp/>buf<sp/>=<sp/>device-&gt;newBuffer(data,bufferSizeInBytes,MTL::ResourceStorageModeShared);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref>*<sp/>matdes<sp/>=<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(...);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_m_p_s_1_1_matrix" kindref="compound">MPS::Matrix</ref>*<sp/>mat<sp/>=<sp/>MPS::Matrix::alloc();mat-&gt;initWithBuffer(buf,matdes);</highlight></codeline>
</programlisting></para>
<para>If you already have a <computeroutput>float</computeroutput> array, it makes more sense to do this than to copy the data into the buffer.</para>
<para>When in doubt, just open the header file corresponding to the operation you want to perform or the data structure you want to know more about.</para>
</sect1>
<sect1 id="md__2_users_2gunjanpayal_2_m_p_s-_port_2_r_e_a_d_m_e_1autotoc_md3">
<title>Matrix Multiplication</title>
<para>Now, here&apos;s a complete example that declares and then multiplies two 3x3 matrices:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Accelerate/Accelerate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NS_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CA_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MTL_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPS_PRIVATE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Foundation/Foundation.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Metal/Metal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;QuartzCore/QuartzCore.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MetalPerformanceShaders/MPSCore/MPSCoreTypes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MetalPerformanceShaders/MPSMatrix/MPSMatrix.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printMTLBuffer(MTL::Buffer<sp/>*buf,<sp/>std::string<sp/>name){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;name&lt;&lt;</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)buf-&gt;contents();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;buf-&gt;length()/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>-<sp/>1;i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;ptr[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;ptr[buf-&gt;length()/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>-<sp/>1]&lt;&lt;</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>data<sp/>to<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mat1_data[]<sp/>=<sp/>{1.0,<sp/>2.0,<sp/>3.0,<sp/>4.0,<sp/>5.0,<sp/>6.0,<sp/>7.0,<sp/>8.0,<sp/>9.0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mat2_data[]<sp/>=<sp/>{9.0,<sp/>8.0,<sp/>7.0,<sp/>6.0,<sp/>5.0,<sp/>4.0,<sp/>3.0,<sp/>2.0,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//declare<sp/>the<sp/>device,<sp/>command<sp/>buffer,<sp/>command<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MTL::Device*<sp/>device<sp/>=<sp/>MTL::CreateSystemDefaultDevice();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MTL::CommandQueue*<sp/>cmdQueue<sp/>=<sp/>device-&gt;newCommandQueue();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MTL::CommandBuffer*<sp/>cmdbuf<sp/>=<sp/>cmdQueue-&gt;commandBuffer();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>buffers<sp/>from<sp/>the<sp/>above<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MTL::Buffer*<sp/>b1<sp/>=<sp/>device-&gt;newBuffer(mat1_data,<sp/>36,<sp/>MTL::ResourceStorageModeShared);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MTL::Buffer*<sp/>b2<sp/>=<sp/>device-&gt;newBuffer(mat2_data,<sp/>36,<sp/>MTL::ResourceStorageModeShared);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>matrix<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref>*<sp/>m1_des<sp/>=<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(3,3,12,MPS::MPSDataTypeFloat32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix_descriptor" kindref="compound">MPS::MatrixDescriptor</ref>*<sp/>m2_des<sp/>=<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(3,3,12,MPS::MPSDataTypeFloat32);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>matrices<sp/>from<sp/>their<sp/>matrix<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix" kindref="compound">MPS::Matrix</ref>*<sp/>m1<sp/>=<sp/>MPS::Matrix::alloc();<sp/>m1-&gt;initWithBuffer(b1,<sp/>m1_des);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix" kindref="compound">MPS::Matrix</ref>*<sp/>m2<sp/>=<sp/>MPS::Matrix::alloc();<sp/>m2-&gt;initWithBuffer(b2,<sp/>m2_des);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix" kindref="compound">MPS::Matrix</ref>*<sp/>m_res<sp/>=<sp/>MPS::Matrix::alloc();<sp/>m_res-&gt;initWithDevice(device,<sp/>MPS::MatrixDescriptor::matrixDescriptorWithRows(3,3,12,MPS::MPSDataTypeFloat32));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//allocate<sp/>a<sp/>matrix<sp/>multiplication<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_m_p_s_1_1_matrix_multiplication" kindref="compound">MPS::MatrixMultiplication</ref>*<sp/>mps_matmul<sp/>=<sp/>MPS::MatrixMultiplication::alloc();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mps_matmul-&gt;initWithDevice(device,<sp/>3,<sp/>3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//encode<sp/>the<sp/>matmul<sp/>op.<sp/>to<sp/>the<sp/>command<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mps_matmul-&gt;encodeToCommandBuffer(cmdbuf,<sp/>m1,<sp/>m2,<sp/>m_res);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//commit<sp/>command<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cmdbuf-&gt;commit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cmdbuf-&gt;waitUntilCompleted();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printMTLBuffer(b1,<sp/></highlight><highlight class="stringliteral">&quot;m1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printMTLBuffer(b2,<sp/></highlight><highlight class="stringliteral">&quot;m2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printMTLBuffer(m_res-&gt;data(),<sp/></highlight><highlight class="stringliteral">&quot;res&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="/Users/gunjanpayal/MPS-Port/README.md"/>
  </compounddef>
</doxygen>
